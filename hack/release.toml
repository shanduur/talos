# commit to be tagged for new release
commit = "HEAD"

project_name = "Talos"
github_repo = "siderolabs/talos"
match_deps = "^github.com/((talos-systems|siderolabs)/[a-zA-Z0-9-]+)$"
ignore_deps = ["github.com/coredns/coredns"]

# previous release
previous = "v1.11.0"

pre_release = true

preface = """
"""

[notes]
    [notes.updates]
        title = "Component Updates"
        description = """\
Linux: 6.17
Kubernetes: 1.34.1
CNI Plugins: 1.8.0
cryptsetup: 2.8.1
LVM2: 2_03_34
systemd-udevd: 257.8
runc: 1.3.2
CoreDNS: 1.12.4
etcd: 3.6.5
Flannel: 0.27.4
Flannel CNI plugin: v1.8.0-flannel1

Talos is built with Go 1.25.1.
"""

    [notes.luks2]
        title = "Encrypted Volumes"
        description = """\
Talos Linux now consistently provides mapped names for encrypted volumes in the format `/dev/mapper/luks2-<volume-id>`.
This change should not affect system or user volumes, but might allow easier identification of encrypted volumes,
and specifically for raw encrypted volumes.
"""

    [notes.disk-encryption]
        title = "Disk Encryption"
        description = """\
Talos versions prior to v1.12 used the state of PCR 7 and signed policies locked to PCR 11 for TPM based disk encryption.

Talos now supports configuring which PCRs states are to be used for TPM based disk encryption via the `options.pcrs`
field in the `tpm` section of the disk encryption configuration.

If user doesn't specify any options Talos defaults to using PCR 7 for backwards compatibility with existing installations.

This change was made to improve compatibility with systems that may have varying states in PCR 7 due to UEFI Secure Boot configurations
and users may wish to disable locking to PCR 7 state entirely.

Signed PCR policies will still be bound to PCR 11.

The currently used PCR's can be seen with `talosctl get volumestatus <volume> -o yaml` command.
"""

    [notes.kspp]
        title = "Kernel Security Posture Profile (KSPP)"
        description = """\
Talos now enables a stricter set of KSPP sysctl settings by default.
The list of overridden settings is available with `talosctl get kernelparamstatus` command.
"""

    [notes.extra-binaries]
        title = "Extra Binaries"
        description = """\
Talos Linux now ships with `nft` binary in the rootfs to support CNIs which shell out to `nft` command.
"""

    [notes.ethernet-config]
        title = "Ethernet Configuration"
        description = """\
The Ethernet configuration now includes a `wakeOnLAN` field to enable Wake-on-LAN (WOL) support.
This field can be set to enable WOL and specify the desired WOL modes.
"""

    [notes.embedded-config]
        title = "Embedded Config"
        description = """\
Talos Linux now supports [embedding the machine configuration](https://www.talos.dev/v1.12/talos-guides/configuration/acquire/) directly into the boot image.
"""

    [notes.feature-lock]
        title = "Feature Lock"
        description = """\
Talos now ignores the following machine configuration fields:

- `machine.features.rbac` (locked to true)
- `machine.features.apidCheckExtKeyUsage` (locked to true)
- `cluster.apiServer.disablePodSecurityPolicy` (locked to false)

These fields were removed from the default machine configuration schema in v1.12 and are now always set to the locked values above.
"""

    [notes.etcd]
        title = "etcd"
        description = """\
etcd container image is now pulled from `registry.k8s.io/etcd` instead of `gcr.io/etcd-development/etcd`.
"""

    [notes.talosctl]
        title = "talosctl image registry create|serve"
        description = """\
talosctl includes two new subcommands `image registry create` and `image registry serve`.

`talosctl image registry create` allows creating a local OCI image registry containing Talos images for speeding up installations, upgrades,
and deployments in air-gapped environments.

`talosctl image registry serve` allows serving the created OCI image registry over HTTP.
It is a read-only registry, meaning images cannot be pushed to it, but the backing storage can be updated by re-running the `create` command.
"""

[make_deps]

    [make_deps.tools]
        variable = "TOOLS"
        repository = "github.com/siderolabs/tools"

    [make_deps.pkgs]
        variable = "PKGS"
        repository = "github.com/siderolabs/pkgs"
